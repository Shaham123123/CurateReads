# -*- coding: utf-8 -*-
"""apriori.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12maCmyMMOW5Tgg00iN_qSZiBIDzD65Dv
"""

import requests
import re

# Function to fetch book recommendations from Google Books API
def recommend_books(query, start_index=0, max_results=5):
    api_key = "AIzaSyBTUN2rpDiGhgvPHSECz0uIAEFTbn_I3I8"  # Replace with your actual API key
    url = f"https://www.googleapis.com/books/v1/volumes?q={query}&startIndex={start_index}&maxResults={max_results}&key={api_key}"

    response = requests.get(url)
    books = response.json()

    recommendations = []

    if 'items' in books:
        for item in books['items']:  # Loop through returned books
            book = {
                "title": item['volumeInfo'].get('title', 'No title available'),
                "authors": item['volumeInfo'].get('authors', ['Unknown author']),
                "description": item['volumeInfo'].get('description', 'No description available'),
                "link": item['volumeInfo'].get('infoLink', '#')
            }
            recommendations.append(book)
    else:
        return "No recommendations found."

    return recommendations

# Function to display book recommendations
def display_recommendations(recommendations):
    if isinstance(recommendations, str):
        print(recommendations)
        return

    for book in recommendations:
        print(f"Title: {book['title']}")
        print(f"Authors: {', '.join(book['authors'])}")
        print(f"Description: {book['description'][:200]}...")  # Truncate long descriptions
        print(f"Link: {book['link']}\n")





# Main program loop
def curate_reads_bot():
    print("Welcome to CurateReads, your personalized book recommendation bot!")

    while True:
        query = input("What kind of books are you looking for? (e.g., 'mystery by Agatha Christie' or just 'Agatha Christie') ")
        author = extract_author(query)  # Check if an author is mentioned

        if author:
            # If the author is identified, query only for books by that author
            print(f"Fetching all books by {author}...")
            recommendations = recommend_books(f"author:{author}")  # Search for books by author
            display_recommendations(recommendations)
        else:
            # Proceed with the original query for genres/topics
            start_index = 0  # Keeps track of the current starting point for fetching books
            more = True  # Control whether to keep showing more books

            while more:
                # Fetch and display book recommendations
                recommendations = recommend_books(query, start_index=start_index)
                display_recommendations(recommendations)

                # Ask the user if they want more recommendations
                user_input = input("Do you want more recommendations? (yes/no): ").strip().lower()

                if user_input == "yes":
                    start_index += 5  # Increment the start index to fetch the next set of books
                else:
                    more = False  # Exit the inner loop if the user doesn't want more recommendations

        # After showing all recommendations or if the user says "no," ask for a new search
        new_search = input("Do you want to search for another type of book? (yes/no): ").strip().lower()
        if new_search != "yes":
            print("Thank you for using CurateReads! Goodbye!")
            break  # Exit the outer loop if the user doesn't want to search again

if __name__ == "__main__":
    curate_reads_bot()